name: Run Parallel Benchmarks in Multiple Clients

on:
  workflow_dispatch:
    inputs:
      test_path:
        description: 'Path to test file'
        default: 'tests/'
      clients:
        description: 'Comma-separated list of client names (e.g., nethermind,geth,reth,besu,erigon)'
        default: 'nethermind,geth,reth'
        required: true
      runs:
        description: 'Number of runs for the application'
        default: 4
      images:
        description: 'Comma-separated list of images for the clients (e.g., default,custom1,custom2)'
        default: 'default'
      output_dir:
        description: 'Output directory for results'
        default: 'results'
      sizes:
        description: 'Comma-separated list of sizes (e.g., 1,100,1000)'
        default: '1,10'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          sudo apt-get update && sudo apt-get install -y jq

      - name: Prepare environment
        run: |
          mkdir -p ${{ github.event.inputs.output_dir }}
          python3 computer_specs.py --output_folder ${{ github.event.inputs.output_dir }}

      - name: Start Docker containers
        run: |
          docker-compose up -d
 
      - name: Run benchmarks
        run: |
          IFS=',' read -ra CLIENTS <<< "${{ github.event.inputs.clients }}"
          IFS=',' read -ra IMAGES <<< "${{ github.event.inputs.images }}"
          IFS=',' read -ra SIZES <<< "${{ github.event.inputs.sizes }}"
          
          TEST_PATH=${{ github.event.inputs.test_path }}
          RUNS=${{ github.event.inputs.runs }}
          OUTPUT_DIR=${{ github.event.inputs.output_dir }}

          check_initialization_completed() {
            local client=$1
            local log_entry=$2
            local container_name="gas-execution-client"
            local max_retries=1024
            local retry_count=0
            local wait_time=0.5

            until [ "$(docker ps -q -f name=$container_name)" ]; do
              echo "Waiting for container $container_name to start..."
              sleep $wait_time
              retry_count=$((retry_count+1))
              if [ $retry_count -ge $max_retries ]; then
                echo "Container $container_name did not start within the expected time."
                return 1
              fi
            done

            echo "Waiting for log entry: $log_entry in $container_name..."
            retry_count=0
            until docker logs $container_name 2>&1 | grep -q "$log_entry"; do
              sleep $wait_time
              retry_count=$((retry_count+1))
              if [ $retry_count -ge $max_retries ]; then
                echo "Log entry $log_entry not found in $container_name within the expected time."
                return 1
              fi
            done

            return 0
          }

          mkdir -p $TEST_PATH/tmp

          for size in "${SIZES[@]}"; do
            echo "=== Running benchmarks for size ${size}M ==="
            
            new_size=$(echo "($size / 1.2 + 0.5)/1" | bc)

            python3 generate_chainspec.py $TEST_PATH/chainspec.json $TEST_PATH/tmp/chainspec.json $new_size
            python3 generate_genesis.py $TEST_PATH/genesis.json $TEST_PATH/tmp/genesis.json $new_size
            python3 generate_besu.py $TEST_PATH/besu.json $TEST_PATH/tmp/besu.json $new_size

            docker stop gas-execution-client
            docker stop gas-execution-client-sync
            docker rm gas-execution-client
            docker rm gas-execution-client-sync

            for run in $(seq 1 $RUNS); do
              for i in "${!CLIENTS[@]}"; do
                echo "=== Run round $run - Client ${CLIENTS[$i]} - Image ${IMAGES[$i]} ==="

                client="${CLIENTS[$i]}"
                image="${IMAGES[$i]}"

                case $client in
                  nethermind) log_entry="initialization completed" ;;
                  reth) log_entry="Starting reth" ;;
                  erigon) log_entry="logging to file system" ;;
                  geth) log_entry="Set global gas cap" ;;
                  besu) log_entry="Writing node record to disk" ;;
                esac

                cd "scripts/$client"
                docker compose down -t 0
                sudo rm -rf execution-data
                cd ../..

                start_time=$(($(date +%s%N) / 1000000))

                if [ -z "$image" ]; then
                  python3 setup_node.py --client $client
                else
                  python3 setup_node.py --client $client --image $image
                fi

                check_initialization_completed $client "$log_entry"
                if [ $? -ne 0 ]; then
                  echo "Initialization check failed for client $client"
                  exit 1
                fi

                initialization_time=$(($(date +%s%N) / 1000000))
                interval=$((initialization_time - start_time))
                
                output_file="${OUTPUT_DIR}/${client}_${run}_first_${size}M.txt"
                echo "$interval" > "$output_file"
                echo "=== Interval $interval written to $output_file ==="

                cd "scripts/$client"
                docker compose down gas-execution-client -t 0
                cd ../..

                start_time=$(($(date +%s%N) / 1000000))

                if [ -z "$image" ]; then
                  python3 setup_node.py --client $client
                else
                  python3 setup_node.py --client $client --image $image
                fi

                check_initialization_completed $client "$log_entry"
                if [ $? -ne 0 ]; then
                  echo "Initialization check failed for client $client"
                  exit 1
                fi

                initialization_time=$(($(date +%s%N) / 1000000))
                interval=$((initialization_time - start_time))
                
                output_file="${OUTPUT_DIR}/${client}_${run}_second_${size}M.txt"
                echo "$interval" > "$output_file"
                echo "=== Interval $interval written to $output_file ==="

                cd "scripts/$client"
                docker compose down -t 0
                sudo rm -rf execution-data
                cd ../..
              done
            done
          done

          python3 report.py
